<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" xmlns:views="com.ae.cryptx.views.*"
	width="340" height="450" showStatusBar="false"
	closing="destroy()"
	initialize="initializeHandler()"
	invoke="applicationInvoke(event)">
	
	<mx:Script>
		<![CDATA[
			import com.ae.logger.LogManager;
			import com.ae.cryptx.model.ModelLocator;
			import com.ae.logger.LogModes;
			import com.ae.logger.LogLevel;
			import com.ae.logger.ILogManager;

			//-----------------------------------------------------------------
			//
			// Variables
			//
			//-----------------------------------------------------------------
			
			private var logger:ILogManager;
			private var model:ModelLocator = ModelLocator.getInstance();

			//-----------------------------------------------------------------
			//
			// Methods
			//
			//-----------------------------------------------------------------
			
			private function initializeHandler():void
			{
				// create a logger instance and set up parameters
				logger = LogManager.getInstance() 
				logger.loggingLevel = LogLevel.INFO;
				logger.loggingMode = LogModes.OVERWRITE;
				logger.bufferSize = LogManager.DEFAULT_BUFFER_SIZE;
				
				logger.writeLog(LogLevel.INFO, "-----------------------------------");
				logger.writeLog(LogLevel.INFO, "CryptX Application Instance started");
				logger.flush();
			}
			
			/**
			 * Invoked when a rap file is double clicked from windows explorer
			 */
			public function applicationInvoke(event:InvokeEvent):void
			{
				try
				{
					var argArray:Array = event.arguments;
					if(argArray.length > 0)
					{
						var rapFile:File = new File(argArray[0]);
						logger.writeLog(LogLevel.DEBUG, "Filepath as argument");
						logger.writeLog(LogLevel.DEBUG, rapFile.nativePath);
						if(rapFile.exists)
						{
							model.systemFile = rapFile;
						}
					}
				}
				catch(error:Error)
				{
					logger.writeLog(LogLevel.ERROR, error.message);
				}
			}
			
			/**
			 * Called when the application is about to be closed.
			 * Performs cleanup operations.
			 */
			private function destroy():void
			{
				// Write to disk
				logger.writeLog(LogLevel.INFO, "-- Exiting application --");
				logger.flush();
			}
		]]>
	</mx:Script>
	
	<!--include the stylesheet-->
	<mx:Style source="resources\styles\default.css"/>
	
	<!--set the app layout-->
	<views:ApplicationLayout/>		
	
</mx:WindowedApplication>